Index: src/main/java/frc/robot/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot;\r\n\r\nimport edu.wpi.first.math.geometry.Translation2d;\r\nimport edu.wpi.first.math.kinematics.SwerveDriveKinematics;\r\nimport edu.wpi.first.math.trajectory.TrapezoidProfile;\r\nimport edu.wpi.first.wpilibj.PneumaticsModuleType;\r\n\r\n/**\r\n * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean\r\n * constants. This class should not be used for any other purpose. All constants should be declared\r\n * globally (i.e. public static). Do not put anything functional in this class.\r\n *\r\n * <p>It is advised to statically import this class (or one of its inner classes) wherever the\r\n * constants are needed, to reduce verbosity.\r\n */\r\npublic final class Constants {\r\n\r\n  public static final class ElectronicsConstants {\r\n\r\n    public static PneumaticsModuleType kPneumaticsModuleType = PneumaticsModuleType.CTREPCM;\r\n  }\r\n\r\n\r\n  public static final class DriveConstants {\r\n\r\n    public static final int kFrontLeftDriveMotorPort = 24;\r\n    public static final int kRearLeftDriveMotorPort = 6;\r\n    public static final int kFrontRightDriveMotorPort = 4;\r\n    public static final int kRearRightDriveMotorPort = 23;\r\n\r\n    public static final int kFrontLeftTurningMotorPort = 21;\r\n    public static final int kRearLeftTurningMotorPort = 7;\r\n    public static final int kFrontRightTurningMotorPort = 3;\r\n    public static final int kRearRightTurningMotorPort = 25;\r\n\r\n    public static final int kFrontLeftTurningEncoderPort = 22;\r\n    public static final int kRearLeftTurningEncoderPort = 10;\r\n    public static final int kFrontRightTurningEncoderPort = 9;\r\n    public static final int kRearRightTurningEncoderPort = 8;\r\n\r\n    public static final double kFrontLeftAngleZero = 79.45; // FIXME: Add angle offset\r\n    public static final double kRearLeftAngleZero = 121.38; // FIXME: Add angle offset\r\n    public static final double kFrontRightAngleZero = -104.68; // FIXME: Add angle offset\r\n    public static final double kRearRightAngleZero = -118.30; // FIXME: Add angle offset\r\n\r\n    public static final boolean kFrontLeftTurningEncoderReversed = false;\r\n    public static final boolean kRearLeftTurningEncoderReversed = false;\r\n    public static final boolean kFrontRightTurningEncoderReversed = false;\r\n    public static final boolean kRearRightTurningEncoderReversed = false;\r\n\r\n    public static final boolean kFrontLeftDriveEncoderReversed = false;\r\n    public static final boolean kRearLeftDriveEncoderReversed = false;\r\n    public static final boolean kFrontRightDriveEncoderReversed = true;\r\n    public static final boolean kRearRightDriveEncoderReversed = true;\r\n\r\n    public static final double kTrackWidth = 0.57785; // FIXME\r\n    // Distance between centers of right and left wheels on robot\r\n    public static final double kWheelBase = 0.57785; // FIXME\r\n    // Distance between front and back wheels on robot\r\n    public static final SwerveDriveKinematics kDriveKinematics =\r\n        new SwerveDriveKinematics(\r\n            new Translation2d(kWheelBase / 2, kTrackWidth / 2),\r\n            new Translation2d(kWheelBase / 2, -kTrackWidth / 2),\r\n            new Translation2d(-kWheelBase / 2, kTrackWidth / 2),\r\n            new Translation2d(-kWheelBase / 2, -kTrackWidth / 2));\r\n\r\n    public static final boolean kGyroReversed = false;\r\n\r\n\r\n    // Values to scale joystick inputs to desired states.\r\n    public static final double kMaxSpeedMetersPerSecond = 4.5; // LOCKED IN\r\n    public static final double kMaxRotationalSpeedMetersPerSecond = 10; // TODO: make sure this is right... (maybe should be radians)\r\n\r\n    // These are example values only - DO NOT USE THESE FOR YOUR OWN ROBOT!\r\n    // These characterization values MUST be determined either experimentally or theoretically\r\n    // for *your* robot's drive.\r\n    // The SysId tool provides a convenient method for obtaining these values for your robot.\r\n    public static final double ksVolts = 0.2; // FIXME with sysid\r\n    public static final double kvVoltSecondsPerMeter = 1; // FIXME with sysid\r\n    public static final double kaVoltSecondsSquaredPerMeter = 0.15; // FIXME with sysid\r\n\r\n\r\n    public static final double ksTurning = 0.77; // LOCKED IN!  -----  old 0.66202\r\n    public static final double kvTurning = 1; // 3.0052\r\n    public static final double kaTurning = 0; // Default to zero\r\n    public static final double kMaxAngularSpeedRadiansPerSecond = Math.PI * 2;\r\n  }\r\n\r\n  public static final class ModuleConstants {\r\n\r\n    public static final double kDriveGearRatio = 7.13;\r\n\r\n    public static final double kPModuleTurnController = 6; // TUNE: 8.2142\r\n    public static final double kIModuleTurnController = 0; // DO NOT USE\r\n    public static final double kDModuleTurnController = 0; // TUNE\r\n\r\n    // Acceleration could be 8pi to make module get anywhere in 0.5 seconds.\r\n    // Will never reach max velocity, so it can be right at the \"top\" of the triangle.\r\n    // In this case, that would be 2pi.\r\n\r\n    public static final double kMaxModuleAngularSpeedRadiansPerSecond = 2 * Math.PI;\r\n    public static final double kMaxModuleAngularAccelerationRadiansPerSecondSquared = 8 * Math.PI;\r\n\r\n    public static final double kPModuleDriveController = 0; // TUNE\r\n    public static final double kIModuleDriveController = 0; // DO NOT USE\r\n    public static final double kDModuleDriveController = 0;\r\n\r\n\r\n    public static final int kDriveFXEncoderCPR = 2048;\r\n    public static final int kTurningCANcoderCPR = 4096;\r\n    public static final double kWheelDiameterMeters = 0.1016; // 4 inches\r\n    public static final double kWheelCircumferenceMeters =\r\n        kWheelDiameterMeters * Math.PI; // C = D * pi\r\n    public static final double kDrivetoMetersPerSecond =\r\n        (10 * kWheelCircumferenceMeters) / (kDriveGearRatio * 2048);\r\n  }\r\n\r\n  public static final class IntakeConstants {\r\n\r\n    public static final int kIntakeMotorPort = 99;\r\n    public static final int kIntakeRetractedSolenoidPort = 4;\r\n    public static final int kIntakeDeployedSolenoidPort = 6;\r\n\r\n    public static final double kIntakeCustomPower = 0.7; // 0 to 1.0\r\n  }\r\n\r\n  public static final class TowerConstants {\r\n\r\n    public static final int bottomTowerFeedMotorPort = 0 - 9;\r\n    public static final int topTowerFeedMotorPort = 0 - 9;\r\n\r\n    public static final int bottomTowerSensorPort = 0 - 9;\r\n    public static final int topTowerSensorPort = 0 - 9;\r\n  }\r\n\r\n  public static final class ShooterConstants {\r\n\r\n    public static final int kLeftShooterMotorPort = 19;\r\n    public static final int kRightShooterMotorPort = 20;\r\n  }\r\n\r\n\r\n  public static final class ClimbConstants {\r\n\r\n    // General constants\r\n    public static final double kClimbMaxHeight = 0; // in meters // FIXME\r\n    public static final double kClimbMinHeight = 0.86995; // in meters\r\n    public static final double kClimbSlightlyExtendedHeight = 0.8;\r\n\r\n    // NOTE:\r\n    // We only need estimates for the bottom position of the climb arms because they are\r\n    // 'zeroed' in the top position. The bottom position values are just estimates because\r\n    // there is the unpredictable nature of how the climb rope winds up.\r\n\r\n    public static final double kClimbLeftMinHeightEncoderEstimate = -1000; // FIXME\r\n    public static final double kClimbRightMinHeightEncoderEstimate = -1000; // FIXME\r\n\r\n    // in meters, when do we switch to pure voltage control.\r\n    public static final double kClimbMinPosPIDErrorThreshold = 0.10;\r\n\r\n    public static final double kClimbVoltageToApplyAfterPID = -3.5; // in volts\r\n    public static final double kClimbVoltageToHoldBottomPosition = -1; // in volts\r\n\r\n    // in meters, how much extra should we un-spool, just to be safe we are at max extension.\r\n    public static final double kClimbMaxPosConfirmationExtraHeight = 0.025;\r\n\r\n\r\n    // ProfiledPID controller constants\r\n    public static final double kPClimbController = 1; // FIXME, TUNE\r\n    public static final double kIClimbController = 0; // DO NOT USE\r\n    public static final double kDClimbController = 0;\r\n    public static final double kMaxClimbSpeedMetersPerSecond = 0.2; // FIXME, TUNE\r\n    public static final double kMaxClimbAccelerationMetersPerSecondSquared = 0.05; // FIXME, TUNE\r\n\r\n    // Motor constants\r\n    public static final int kLeftClimbMotorPort = 12;\r\n    public static final int kRightClimbMotorPort = 13;\r\n\r\n    // Encoder constants\r\n    public static final int kLeftClimbEncoderPort = 11;\r\n    public static final int kRightClimbEncoderPort = 29;\r\n    public static final double kLeftClimbEncoderOffsetForTopPos = 0; // FIXME ('zero' with arm fully extended)\r\n    // Limit Switch constants\r\n    public static final int kLeftClimbLimitSwitchPort = 3;\r\n    public static final int kRightClimbLimitSwitchPort = 2;\r\n    // Solenoid constants\r\n    public static final int kClimbVerticalSolenoidPort = 5;\r\n    public static final int kClimbAngledSolenoidPort = 7;\r\n    public static double kRightClimbEncoderOffsetForTopPos = 0; // FIXME ('zero' with arm fully extended)\r\n\r\n\r\n  }\r\n\r\n  public static final class LEDsConstants {\r\n\r\n    public static final int kLEDControllerPort = 3;\r\n  }\r\n\r\n  public static final class OIConstants {\r\n    public static final int kButtonControllerPort = 1;\r\n\r\n    public static final int kDriverControllerPort = 0;\r\n    public static final double kDriverControllerDeadband = 0.1;\r\n    public static final int kDriverControllerZeroEncodersButton = 8;\r\n    public static final int kDriverControllerZeroHeadingButton = 9;\r\n  }\r\n\r\n  public static final class AutoConstants {\r\n\r\n    public static final double kMaxSpeedMetersPerSecond = 1;\r\n    public static final double kMaxAccelerationMetersPerSecondSquared = 1;\r\n    public static final double kMaxAngularSpeedRadiansPerSecond = Math.PI;\r\n    public static final double kMaxAngularSpeedRadiansPerSecondSquared = Math.PI;\r\n\r\n    public static final double kPXController = 1;\r\n    public static final double kPYController = 1;\r\n    public static final double kPThetaController = 1;\r\n\r\n    // Constraint for the motion profiled robot angle controller\r\n    public static final TrapezoidProfile.Constraints kThetaControllerConstraints =\r\n        new TrapezoidProfile.Constraints(\r\n            kMaxAngularSpeedRadiansPerSecond, kMaxAngularSpeedRadiansPerSecondSquared);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/Constants.java b/src/main/java/frc/robot/Constants.java
--- a/src/main/java/frc/robot/Constants.java	(revision dab63ef418c7d42c908cf12ff9590a2423250d11)
+++ b/src/main/java/frc/robot/Constants.java	(date 1647914240489)
@@ -73,19 +73,19 @@
 
     // Values to scale joystick inputs to desired states.
     public static final double kMaxSpeedMetersPerSecond = 4.5; // LOCKED IN
-    public static final double kMaxRotationalSpeedMetersPerSecond = 10; // TODO: make sure this is right... (maybe should be radians)
+    public static final double kMaxRotationalSpeed = 4 * Math.PI; // TODO: make sure this is right... (maybe should be radians)
 
     // These are example values only - DO NOT USE THESE FOR YOUR OWN ROBOT!
     // These characterization values MUST be determined either experimentally or theoretically
     // for *your* robot's drive.
     // The SysId tool provides a convenient method for obtaining these values for your robot.
     public static final double ksVolts = 0.2; // FIXME with sysid
-    public static final double kvVoltSecondsPerMeter = 1; // FIXME with sysid
+    public static final double kvVoltSecondsPerMeter = 2.75; // FIXME with sysid
     public static final double kaVoltSecondsSquaredPerMeter = 0.15; // FIXME with sysid
 
 
     public static final double ksTurning = 0.77; // LOCKED IN!  -----  old 0.66202
-    public static final double kvTurning = 1; // 3.0052
+    public static final double kvTurning = 0.75; // 3.0052
     public static final double kaTurning = 0; // Default to zero
     public static final double kMaxAngularSpeedRadiansPerSecond = Math.PI * 2;
   }
@@ -94,7 +94,7 @@
 
     public static final double kDriveGearRatio = 7.13;
 
-    public static final double kPModuleTurnController = 6; // TUNE: 8.2142
+    public static final double kPModuleTurnController = 8.5; // TUNE: 8.2142
     public static final double kIModuleTurnController = 0; // DO NOT USE
     public static final double kDModuleTurnController = 0; // TUNE
 
@@ -103,7 +103,7 @@
     // In this case, that would be 2pi.
 
     public static final double kMaxModuleAngularSpeedRadiansPerSecond = 2 * Math.PI;
-    public static final double kMaxModuleAngularAccelerationRadiansPerSecondSquared = 8 * Math.PI;
+    public static final double kMaxModuleAngularAccelerationRadiansPerSecondSquared = 10 * Math.PI;
 
     public static final double kPModuleDriveController = 0; // TUNE
     public static final double kIModuleDriveController = 0; // DO NOT USE
Index: src/main/java/frc/robot/RobotContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot;\r\n\r\nimport edu.wpi.first.wpilibj.Joystick;\r\nimport edu.wpi.first.wpilibj.XboxController;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.InstantCommand;\r\nimport edu.wpi.first.wpilibj2.command.RunCommand;\r\nimport edu.wpi.first.wpilibj2.command.button.JoystickButton;\r\nimport edu.wpi.first.wpilibj2.command.button.POVButton;\r\nimport frc.robot.Constants.DriveConstants;\r\nimport frc.robot.Constants.OIConstants;\r\nimport frc.robot.commands.testing.ClimbManualIndependentControl;\r\nimport frc.robot.subsystems.ClimbSubsystem;\r\nimport frc.robot.subsystems.DriveSubsystem;\r\nimport frc.robot.subsystems.IntakeSubsystem;\r\nimport frc.robot.subsystems.LimelightSubsystem;\r\nimport java.util.function.DoubleSupplier;\r\n\r\n/*\r\n * This class is where the bulk of the robot should be declared.  Since Command-based is a\r\n * \"declarative\" paradigm, very little robot logic should actually be handled in the {@link Robot}\r\n * periodic methods (other than the scheduler calls).  Instead, the structure of the robot\r\n * (including subsystems, commands, and button mappings) should be declared here.\r\n */\r\n\r\npublic class RobotContainer {\r\n\r\n  // The robot's subsystems\r\n  private final DriveSubsystem m_robotDrive = new DriveSubsystem();\r\n  private final IntakeSubsystem m_intakeSubsystem = new IntakeSubsystem();\r\n//  private final ShooterSubsystem m_shooterSubsystem = new ShooterSubsystem();\r\n  private final ClimbSubsystem m_climbSubsystem = new ClimbSubsystem();\r\n  private final LimelightSubsystem m_Limelight = LimelightSubsystem.getInstance();\r\n//  private final LEDsSubsystem m_LEDs = new LEDsSubsystem();\r\n\r\n  // The driver's controller\r\n  private final Joystick m_driverController = new Joystick(OIConstants.kDriverControllerPort);\r\n  private final Joystick m_buttonController = new Joystick(OIConstants.kButtonControllerPort);\r\n\r\n  /**\r\n   * The container for the robot. Contains subsystems, OI devices, and commands.\r\n   */\r\n  public RobotContainer() {\r\n    // Turn off the limelight lights because they are very bright\r\n    m_Limelight.turnOffLED();\r\n    // m_LEDs.setLEDsRaw(-0.39 ); // will normally be handled by commands, just for testing.\r\n\r\n    /**\r\n     * The container for the robot. Contains subsystems, OI devices, and commands.\r\n     */\r\n    // Configure the button bindings/joysticks\r\n    configureButtonBindings();\r\n  }\r\n\r\n  private static double deadband(double value, double deadband) {\r\n    if (Math.abs(value) > deadband) {\r\n      if (value > 0.0) {\r\n        return (value - deadband) / (1.0 - deadband);\r\n      } else {\r\n        return (value + deadband) / (1.0 - deadband);\r\n      }\r\n    } else {\r\n      return 0.0;\r\n    }\r\n  }\r\n\r\n  private static double modifyAxis(DoubleSupplier supplierValue) {\r\n    double value = supplierValue.getAsDouble();\r\n\r\n    // Deadband\r\n    value = deadband(value, OIConstants.kDriverControllerDeadband);\r\n\r\n    // Square the axis\r\n    value = Math.copySign(value * value, value);\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Use this method to define your button->command mappings. Buttons can be created by\r\n   * instantiating a {@link edu.wpi.first.wpilibj.GenericHID} or one of its subclasses ({@link\r\n   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then calling passing it to a\r\n   * {@link JoystickButton}.\r\n   */\r\n  private void configureButtonBindings() {\r\n//    TODO: figure out what will be mechanically done by competition and get that done in programming\r\n    DoubleSupplier LEFT_STICK_X = () -> m_driverController.getRawAxis(0);\r\n    DoubleSupplier LEFT_STICK_Y = () -> m_driverController.getRawAxis(1);\r\n    DoubleSupplier RIGHT_STICK_X = () -> m_driverController.getRawAxis(2);\r\n    DoubleSupplier RIGHT_STICK_Y = () -> m_driverController.getRawAxis(3);\r\n\r\n    JoystickButton A_BUTTON = new JoystickButton(m_driverController, 2);\r\n    JoystickButton Y_BUTTON = new JoystickButton(m_driverController, 4);\r\n    JoystickButton B_BUTTON = new JoystickButton(m_driverController, 3);\r\n    JoystickButton X_BUTTON = new JoystickButton(m_driverController, 1);\r\n    JoystickButton RIGHT_BUMPER = new JoystickButton(m_driverController, 6);\r\n    JoystickButton LEFT_BUMPER = new JoystickButton(m_driverController, 5);\r\n    POVButton UP_DIRECTION_PAD = new POVButton(m_driverController, 0);\r\n    POVButton RIGHT_DIRECTION_PAD = new POVButton(m_driverController, 90);\r\n\r\n    /**\r\n     * Sets the default command and joystick bindings for the drive train.\r\n     * NOTE: The left stick controls translation of the robot. Turning is controlled by the X axis of the right stick.\r\n     */\r\n\r\n    m_robotDrive.setDefaultCommand(\r\n        new RunCommand(\r\n            () ->\r\n                m_robotDrive.drive(\r\n                    modifyAxis(LEFT_STICK_Y) * -1 // xAxis\r\n                        * DriveConstants.kMaxSpeedMetersPerSecond,\r\n                    modifyAxis(LEFT_STICK_X) * -1 // yAxis\r\n                        * DriveConstants.kMaxSpeedMetersPerSecond,\r\n                    modifyAxis(RIGHT_STICK_X) * -1 // rot CCW positive\r\n                        * DriveConstants.kMaxRotationalSpeedMetersPerSecond,\r\n                    true),\r\n            m_robotDrive));\r\n\r\n//    new JoystickButton(m_buttonController, 2).whileHeld(new Shoot)\r\n//    new JoystickButton(m_buttonController, 8).whileHeld(new IntakeActiveTeleop())\r\n//    new JoystickButton(m_buttonController, 7).whileHeld(new Expel())\r\n//    new POVButton(m_buttonController, 270).whenPressed(new MidBarLatchHooks(m_climbSubsystem));\r\n//    new POVButton(m_buttonController, 180).whenPressed(new ClimbBottomPositon(m_climbSubsystem));\r\n//    new POVButton(m_buttonController, 90).whenPressed(new MidBarClimb(m_climbSubsystem));\r\n\r\n    A_BUTTON.toggleWhenPressed(new ClimbManualIndependentControl(m_climbSubsystem, LEFT_STICK_Y, RIGHT_STICK_Y));\r\n\r\n    //TODO: Test/tune climb using commands like this\r\n\r\n    // Make sure hooks are latched when testing.\r\n//    RIGHT_BUMPER.whenPressed(new InstantCommand(m_climbSubsystem::setRightHookToBottomPos));\r\n//    LEFT_BUMPER.whenPressed(new InstantCommand(m_climbSubsystem::setLeftHookToBottomPos));\r\n//    B_BUTTON.toggleWhenPressed(new ShooterManualControl(m_shooterSubsystem, 0.5));\r\n\r\n//    B_BUTTON.whenPressed(new InstantCommand(m_climbSubsystem::setClimbAngled));\r\n//    X_BUTTON.whenPressed(new InstantCommand(m_climbSubsystem::setClimbVertical));\r\n//\r\n//    RIGHT_BUMPER.whenPressed(new IntakeActiveTeleop(m_intakeSubsystem, RIGHT_BUMPER));\r\n\r\n//    B_BUTTON.toggleWhenPressed(new ClimbManualSolenoidControl(m_climbSubsystem, LEFT_BUMPER, RIGHT_BUMPER));\r\n//    Y_BUTTON.whenPressed(new InstantCommand(m_Limelight::blinkLED));\r\n\r\n    RIGHT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidRetracted));\r\n    LEFT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidDeployed));\r\n    UP_DIRECTION_PAD.whenPressed(new InstantCommand(m_Limelight::turnOffLED));\r\n    RIGHT_DIRECTION_PAD.whenPressed(new InstantCommand(m_robotDrive::zeroHeading));\r\n//\r\n    //  new JoystickButton(m_driverController, 2).whenPressed(new RunCommand(()->m_robotDrive.resetEncoders()));\r\n    //  new JoystickButton(m_driverController, 1).whenPressed(()->m_robotDrive.zeroHeading());\r\n  }\r\n\r\n//  /**\r\n//   * Use this method to define your button->command mappings. Buttons can be created by\r\n//   * instantiating a {@link edu.wpi.first.wpilibj.GenericHID} or one of its subclasses ({@link\r\n//   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then calling passing it to a\r\n//   * {@link JoystickButton}.\r\n//   */\r\n//  private void configureButtonBindingsTest() {\r\n//    DoubleSupplier LEFT_STICK_X = () -> m_driverController.getRawAxis(0);\r\n//    DoubleSupplier LEFT_STICK_Y = () -> m_driverController.getRawAxis(1);\r\n//    DoubleSupplier RIGHT_STICK_X = () -> m_driverController.getRawAxis(2);\r\n//    DoubleSupplier RIGHT_STICK_Y = () -> m_driverController.getRawAxis(3);\r\n//\r\n//    JoystickButton A_BUTTON = new JoystickButton(m_driverController, 2);\r\n//    JoystickButton Y_BUTTON = new JoystickButton(m_driverController, 4);\r\n//    JoystickButton B_BUTTON = new JoystickButton(m_driverController, 3);\r\n//    JoystickButton X_BUTTON = new JoystickButton(m_driverController, 1);\r\n//    JoystickButton RIGHT_BUMPER = new JoystickButton(m_driverController, 6);\r\n//    JoystickButton LEFT_BUMPER = new JoystickButton(m_driverController, 5);\r\n//    POVButton UP_DIRECTION_PAD = new POVButton(m_driverController, 0);\r\n//    POVButton RIGHT_DIRECTION_PAD = new POVButton(m_driverController, 90);\r\n//\r\n//    /**\r\n//     * Sets the default command and joystick bindings for the drive train.\r\n//     * NOTE: The left stick controls translation of the robot. Turning is controlled by the X axis of the right stick.\r\n//     */\r\n//\r\n//    m_robotDrive.setDefaultCommand(\r\n//        new RunCommand(\r\n//            () ->\r\n//                m_robotDrive.drive(\r\n//                    modifyAxis(LEFT_STICK_Y) * -1// xAxis\r\n//                        * DriveConstants.kMaxSpeedMetersPerSecond,\r\n//                    modifyAxis(LEFT_STICK_X) * -1 // yAxis\r\n//                        * DriveConstants.kMaxSpeedMetersPerSecond,\r\n//                    modifyAxis(RIGHT_STICK_X) * -1 // rot CCW positive\r\n//                        * DriveConstants.kMaxRotationalSpeedMetersPerSecond,\r\n//                    true),\r\n//            m_robotDrive));\r\n//\r\n//\r\n//\r\n//    //TODO: Test/tune climb using commands like this\r\n//\r\n//    // Make sure hooks are latched when testing.\r\n//    RIGHT_BUMPER.whenPressed(new InstantCommand(m_climbSubsystem::setRightHookToBottomPos));\r\n//    LEFT_BUMPER.whenPressed(new InstantCommand(m_climbSubsystem::setLeftHookToBottomPos));\r\n////    B_BUTTON.toggleWhenPressed(new ShooterManualControl(m_shooterSubsystem, 0.5));\r\n//\r\n////    A_BUTTON.toggleWhenPressed(\r\n////        new ClimbManualIndependentControl(m_climbSubsystem, LEFT_STICK_Y, RIGHT_STICK_Y));\r\n////    Y_BUTTON.toggleWhenPressed(new ClimbManualPairedControl(m_climbSubsystem, RIGHT_STICK_Y));\r\n//////\r\n////    B_BUTTON.whenPressed(new InstantCommand(m_climbSubsystem::setClimbAngled));\r\n////    X_BUTTON.whenPressed(new InstantCommand(m_climbSubsystem::setClimbVertical));\r\n////\r\n////    RIGHT_BUMPER.whenPressed(new IntakeActiveTeleop(m_intakeSubsystem, RIGHT_BUMPER));\r\n//\r\n////    B_BUTTON.toggleWhenPressed(new ClimbManualSolenoidControl(m_climbSubsystem, LEFT_BUMPER, RIGHT_BUMPER));\r\n////    Y_BUTTON.whenPressed(new InstantCommand(m_Limelight::blinkLED));\r\n////    UP_DIRECTION_PAD.whenPressed(new InstantCommand(m_Limelight::turnOffLED));\r\n//    RIGHT_DIRECTION_PAD.whenPressed(new InstantCommand(m_robotDrive::zeroHeading));\r\n////    A_BUTTON.whenPressed(new InstantCommand(m_Limelight::turnOnLED));\r\n////\r\n//    //  new JoystickButton(m_driverController, 2).whenPressed(new RunCommand(()->m_robotDrive.resetEncoders()));\r\n//    //  new JoystickButton(m_driverController, 1).whenPressed(()->m_robotDrive.zeroHeading());\r\n//  }\r\n\r\n//  public void resetDrivetrainEncoders(){\r\n//    m_robotDrive.resetEncoders();\r\n//  }\r\n\r\n  /**\r\n   * Use this to pass the autonomous command to the main {@link Robot} class.\r\n   *\r\n   * @return the command to run in autonomous\r\n   */\r\n  public Command getAutonomousCommand() {\r\n//    // Create config for trajectory\r\n//    TrajectoryConfig config =\r\n//        new TrajectoryConfig(\r\n//            AutoConstants.kMaxSpeedMetersPerSecond,\r\n//            AutoConstants.kMaxAccelerationMetersPerSecondSquared)\r\n//            // Add kinematics to ensure max speed is actually obeyed\r\n//            .setKinematics(DriveConstants.kDriveKinematics);\r\n//\r\n//    // An example trajectory to follow.  All units in meters.\r\n//    Trajectory exampleTrajectory =\r\n//        TrajectoryGenerator.generateTrajectory(\r\n//            // Start at the origin facing the +X direction\r\n//            new Pose2d(0, 0, new Rotation2d(0)),\r\n//            // Pass through these two interior waypoints, making an 's' curve path\r\n//            List.of(new Translation2d(1, 1), new Translation2d(2, -1)),\r\n//            // End 3 meters straight ahead of where we started, facing forward\r\n//            new Pose2d(3, 0, new Rotation2d(0)),\r\n//            config);\r\n//\r\n//    var thetaController =\r\n//        new ProfiledPIDController(\r\n//            AutoConstants.kPThetaController, 0, 0, AutoConstants.kThetaControllerConstraints);\r\n//    thetaController.enableContinuousInput(-Math.PI, Math.PI);\r\n//\r\n//    SwerveControllerCommand swerveControllerCommand =\r\n//        new SwerveControllerCommand(\r\n//            exampleTrajectory,\r\n//            m_robotDrive::getPose, // Functional interface to feed supplier\r\n//            DriveConstants.kDriveKinematics,\r\n//\r\n//            // Position controllers\r\n//            new PIDController(AutoConstants.kPXController, 0, 0),\r\n//            new PIDController(AutoConstants.kPYController, 0, 0),\r\n//            thetaController,\r\n//            m_robotDrive::setModuleStates,\r\n//            m_robotDrive);\r\n//\r\n//    // Reset odometry to the starting pose of the trajectory.\r\n//    m_robotDrive.resetOdometry(exampleTrajectory.getInitialPose());\r\n//\r\n//    // Run path following command, then stop at the end.\r\n//    return swerveControllerCommand.andThen(() -> m_robotDrive.drive(0, 0, 0, false));\r\n    return null;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/RobotContainer.java b/src/main/java/frc/robot/RobotContainer.java
--- a/src/main/java/frc/robot/RobotContainer.java	(revision dab63ef418c7d42c908cf12ff9590a2423250d11)
+++ b/src/main/java/frc/robot/RobotContainer.java	(date 1647914192574)
@@ -13,6 +13,9 @@
 import edu.wpi.first.wpilibj2.command.button.POVButton;
 import frc.robot.Constants.DriveConstants;
 import frc.robot.Constants.OIConstants;
+import frc.robot.commands.climb.ClimbBottomPositon;
+import frc.robot.commands.climb.MidBarClimb;
+import frc.robot.commands.climb.MidBarLatchHooks;
 import frc.robot.commands.testing.ClimbManualIndependentControl;
 import frc.robot.subsystems.ClimbSubsystem;
 import frc.robot.subsystems.DriveSubsystem;
@@ -39,13 +42,13 @@
 
   // The driver's controller
   private final Joystick m_driverController = new Joystick(OIConstants.kDriverControllerPort);
-  private final Joystick m_buttonController = new Joystick(OIConstants.kButtonControllerPort);
+//  private final Joystick m_buttonController = new Joystick(OIConstants.kButtonControllerPort);
 
   /**
    * The container for the robot. Contains subsystems, OI devices, and commands.
    */
   public RobotContainer() {
-    // Turn off the limelight lights because they are very bright
+    // Turn off the limelight lights because they are very br   ight
     m_Limelight.turnOffLED();
     // m_LEDs.setLEDsRaw(-0.39 ); // will normally be handled by commands, just for testing.
 
@@ -116,7 +119,7 @@
                     modifyAxis(LEFT_STICK_X) * -1 // yAxis
                         * DriveConstants.kMaxSpeedMetersPerSecond,
                     modifyAxis(RIGHT_STICK_X) * -1 // rot CCW positive
-                        * DriveConstants.kMaxRotationalSpeedMetersPerSecond,
+                        * DriveConstants.kMaxRotationalSpeed,
                     true),
             m_robotDrive));
 
@@ -127,7 +130,7 @@
 //    new POVButton(m_buttonController, 180).whenPressed(new ClimbBottomPositon(m_climbSubsystem));
 //    new POVButton(m_buttonController, 90).whenPressed(new MidBarClimb(m_climbSubsystem));
 
-    A_BUTTON.toggleWhenPressed(new ClimbManualIndependentControl(m_climbSubsystem, LEFT_STICK_Y, RIGHT_STICK_Y));
+//    A_BUTTON.toggleWhenPressed(new ClimbManualIndependentControl(m_climbSubsystem, LEFT_STICK_Y, RIGHT_STICK_Y));
 
     //TODO: Test/tune climb using commands like this
 
@@ -144,8 +147,8 @@
 //    B_BUTTON.toggleWhenPressed(new ClimbManualSolenoidControl(m_climbSubsystem, LEFT_BUMPER, RIGHT_BUMPER));
 //    Y_BUTTON.whenPressed(new InstantCommand(m_Limelight::blinkLED));
 
-    RIGHT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidRetracted));
-    LEFT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidDeployed));
+//    RIGHT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidRetracted));
+//    LEFT_BUMPER.whenPressed(new InstantCommand(m_intakeSubsystem::setSolenoidDeployed));
     UP_DIRECTION_PAD.whenPressed(new InstantCommand(m_Limelight::turnOffLED));
     RIGHT_DIRECTION_PAD.whenPressed(new InstantCommand(m_robotDrive::zeroHeading));
 //
@@ -188,7 +191,7 @@
 //                    modifyAxis(LEFT_STICK_X) * -1 // yAxis
 //                        * DriveConstants.kMaxSpeedMetersPerSecond,
 //                    modifyAxis(RIGHT_STICK_X) * -1 // rot CCW positive
-//                        * DriveConstants.kMaxRotationalSpeedMetersPerSecond,
+//                        * DriveConstants.kMaxRotationalSpeed,
 //                    true),
 //            m_robotDrive));
 //
Index: src/main/java/frc/robot/subsystems/SwerveModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot.subsystems;\r\n\r\nimport com.ctre.phoenix.motorcontrol.NeutralMode;\r\nimport com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;\r\nimport com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;\r\nimport com.ctre.phoenix.sensors.AbsoluteSensorRange;\r\nimport com.ctre.phoenix.sensors.CANCoder;\r\n\r\nimport edu.wpi.first.math.controller.PIDController;\r\nimport edu.wpi.first.math.controller.ProfiledPIDController;\r\nimport edu.wpi.first.math.controller.SimpleMotorFeedforward;\r\nimport edu.wpi.first.math.geometry.Rotation2d;\r\nimport edu.wpi.first.math.kinematics.SwerveModuleState;\r\nimport edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;\r\nimport edu.wpi.first.wpilibj.shuffleboard.ShuffleboardLayout;\r\nimport edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;\r\nimport edu.wpi.first.math.trajectory.TrapezoidProfile;\r\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\r\nimport frc.robot.Constants.DriveConstants;\r\nimport frc.robot.Constants.ModuleConstants;\r\n\r\npublic class SwerveModule {\r\n  private final WPI_TalonFX m_driveMotor;\r\n  private final WPI_TalonFX m_turningMotor;\r\n\r\n  private final CANCoder m_turnEncoder;\r\n  // Driving encoder uses the integrated FX encoder\r\n  // e.g. testMotor.getSelectedSensorPosition();\r\n\r\n\r\n  // PID controller for velocity. DO NOT SET kD.  It is redundant as setVoltage() already controls this\r\n  private final PIDController m_drivePIDController =\r\n      new PIDController(\r\n          ModuleConstants.kPModuleDriveController,\r\n          ModuleConstants.kIModuleDriveController, // 0\r\n          ModuleConstants.kDModuleDriveController // 0\r\n      );\r\n\r\n  // ShuffleboardTab PIDtab = Shuffleboard.getTab(\"PID Tuning\");\r\n\r\n\r\n  // Using a TrapezoidProfile PIDController to allow for smooth turning\r\n  private final ProfiledPIDController m_turnPIDController =\r\n      new ProfiledPIDController(\r\n          ModuleConstants.kPModuleTurnController,\r\n          ModuleConstants.kIModuleTurnController, // 0\r\n          ModuleConstants.kDModuleTurnController,\r\n          new TrapezoidProfile.Constraints(\r\n              ModuleConstants.kMaxModuleAngularSpeedRadiansPerSecond,\r\n              ModuleConstants.kMaxModuleAngularAccelerationRadiansPerSecondSquared));\r\n\r\n  // In the pose example.\r\n  // NOTE: The passed-in gains must have units consistent with the distance units, or a compile-time error will be thrown.\r\n  // kS should have units of volts, kV should have units of volts * seconds / distance, and kA should have units of volts * seconds^2 / distance.\r\n//  // Gains are for example purposes only - must be determined for your own robot!\r\n//  private final SimpleMotorFeedforward m_driveFeedforward = new SimpleMotorFeedforward(1, 3);\r\n//  private final SimpleMotorFeedforward m_turnFeedforward = new SimpleMotorFeedforward(1, 0.5);\r\n\r\n  SimpleMotorFeedforward driveFeedforward = new SimpleMotorFeedforward(\r\n      DriveConstants.ksVolts, DriveConstants.kvVoltSecondsPerMeter);\r\n\r\n  SimpleMotorFeedforward turnFeedForward = new SimpleMotorFeedforward(\r\n      DriveConstants.ksTurning, DriveConstants.kvTurning, DriveConstants.kaTurning);\r\n\r\n  private boolean done = false;\r\n\r\n  // shuffleboard stuff\r\n  ShuffleboardLayout shuffleboardContainer;\r\n\r\n  /**\r\n   * Constructs a swerve module\r\n   * @param driveMotorChannel ID of the drive motor\r\n   * @param turningMotorChannel ID of the turn motor\r\n   * @param turningEncoderChannel ID of the CANCoder\r\n   * @param angleZero CANCoder offset\r\n   * @param encoderReversed is the turn encoder reversed\r\n   * @param driveReversed is the drive motor reversed\r\n   * @param container shuffleboard container to print debug to\r\n   */\r\n  public SwerveModule(\r\n      int driveMotorChannel,\r\n      int turningMotorChannel,\r\n      int turningEncoderChannel,\r\n      double angleZero,\r\n      boolean encoderReversed,\r\n      boolean driveReversed,\r\n      ShuffleboardLayout container\r\n      ) {\r\n\r\n    // Initialize the motors\r\n    m_driveMotor = new WPI_TalonFX(driveMotorChannel);\r\n    m_turningMotor = new WPI_TalonFX(turningMotorChannel);\r\n\r\n    // For testing, can be removed later\r\n    m_driveMotor.setNeutralMode(NeutralMode.Brake);\r\n    m_turningMotor.setNeutralMode(NeutralMode.Brake);\r\n\r\n    // Handle whether motor should be reversed or not\r\n    m_driveMotor.setInverted(driveReversed);\r\n    m_turningMotor.setInverted(true);\r\n\r\n    // Configure the encoders for both motors\r\n    m_driveMotor.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, 0, 0);\r\n    m_turnEncoder = new CANCoder(turningEncoderChannel);\r\n    m_turnEncoder.configAbsoluteSensorRange(AbsoluteSensorRange.Signed_PlusMinus180);\r\n    m_turnEncoder.configMagnetOffset(angleZero);\r\n    m_turnEncoder.configSensorDirection(encoderReversed);\r\n\r\n\r\n    // Limit the PID Controller's input range between -pi and pi and set the input\r\n    // to be continuous.\r\n    m_turnPIDController.enableContinuousInput(-Math.PI, Math.PI);\r\n\r\n    // Shuffleboard\r\n    shuffleboardContainer = container;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the heading of the module\r\n   * @return the absolute position of the CANCoder\r\n   */\r\n  public double getModuleHeading(){\r\n    return this.m_turnEncoder.getAbsolutePosition();\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the module.\r\n   * @return The current state of the module.\r\n   */\r\n  public SwerveModuleState getState() {\r\n    double m_speedMetersPerSecond =\r\n        ModuleConstants.kDrivetoMetersPerSecond * m_driveMotor.getSelectedSensorVelocity();\r\n\r\n    double m_turningRadians =\r\n        (Math.PI/180) * m_turnEncoder.getAbsolutePosition();\r\n\r\n    return new SwerveModuleState(m_speedMetersPerSecond, new Rotation2d(m_turningRadians));\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the desired state for the module and sends calculated output from controller to the motor.\r\n   * @param desiredState Desired state with speed and angle.\r\n   */\r\n  public void setDesiredState(SwerveModuleState desiredState) {\r\n    double m_speedMetersPerSecond =\r\n        ModuleConstants.kDrivetoMetersPerSecond * m_driveMotor.getSelectedSensorVelocity();\r\n\r\n    double m_turnRadians =\r\n        ((2*Math.PI)/360) * m_turnEncoder.getAbsolutePosition();\r\n\r\n    // Optimize the reference state to avoid spinning further than 90 degrees\r\n    SwerveModuleState state =\r\n        SwerveModuleState.optimize(desiredState, new Rotation2d(m_turnRadians));\r\n\r\n//    SwerveModuleState state = desiredState;\r\n\r\n    // Calculate the drive output from the drive PID controller.\r\n    final double driveOutput =\r\n        m_drivePIDController.calculate(m_speedMetersPerSecond, state.speedMetersPerSecond)\r\n             + driveFeedforward.calculate(state.speedMetersPerSecond);\r\n\r\n    // Calculate the turning motor output from the turning PID controller.\r\n    final double turnOutput =\r\n        m_turnPIDController.calculate(m_turnRadians, state.angle.getRadians())\r\n            + turnFeedForward.calculate(m_turnPIDController.getSetpoint().velocity);\r\n\r\n//    if (!done) {\r\n//      shuffleboardContainer.addNumber(\r\n//          shuffleboardContainer.getTitle() + \" currentState (speedMetersPerSecond)\",\r\n//          () -> getState().speedMetersPerSecond);\r\n//      shuffleboardContainer.addNumber(shuffleboardContainer.getTitle() + \" currentState: (degrees)\",\r\n//          () -> getState().angle.getDegrees());\r\n//      shuffleboardContainer.addNumber(\r\n//          shuffleboardContainer.getTitle() + \" desiredState (speedMetersPerSecond)\",\r\n//          () -> desiredState.speedMetersPerSecond);\r\n//      shuffleboardContainer.addNumber(shuffleboardContainer.getTitle() + \" desiredState: (degrees)\",\r\n//          () -> desiredState.angle.getDegrees());\r\n//      shuffleboardContainer.addNumber(shuffleboardContainer.getTitle() + \" driveOutput (PID)\",\r\n//          () -> m_drivePIDController.calculate(m_speedMetersPerSecond));\r\n//      shuffleboardContainer.addNumber(\r\n//          shuffleboardContainer.getTitle() + \" driveOutput (Feedforward)\",\r\n//          () -> driveFeedforward.calculate(state.speedMetersPerSecond));\r\n//      shuffleboardContainer.addNumber(shuffleboardContainer.getTitle() + \" turnOutput (PID)\",\r\n//          () -> m_turnPIDController.calculate(m_turnRadians, state.angle.getRadians()));\r\n//      shuffleboardContainer.addNumber(\r\n//          shuffleboardContainer.getTitle() + \" turnOutput (Feedforward)\",\r\n//          () -> turnFeedForward.calculate(m_turnPIDController.getSetpoint().velocity));\r\n//      shuffleboardContainer.addNumber(\"turnPID Setpoint Velocity\",\r\n//          () -> m_turnPIDController.getSetpoint().velocity);\r\n//      done = true;\r\n//    }\r\n    SmartDashboard.putString(shuffleboardContainer.getTitle() + \" desired state: \", state.toString());\r\n\r\n\r\n    // Calculate the turning motor output from the turning PID controller.\r\n    m_driveMotor.set(driveOutput/12);\r\n    m_turningMotor.set(turnOutput/12);\r\n    SmartDashboard.putNumber(\"Rear Right PID\", m_turnPIDController.calculate(m_turnRadians, state.angle.getRadians()));\r\n    SmartDashboard.putNumber(\"Rear Right setpoint velocity\", m_turnPIDController.getSetpoint().velocity);\r\n    SmartDashboard.putNumber(\"Rear Right FeedForward\", turnFeedForward.calculate(m_turnPIDController.getSetpoint().velocity));\r\n    SmartDashboard.putNumber(shuffleboardContainer.getTitle() + \" D\", driveOutput/12);\r\n    SmartDashboard.putNumber(shuffleboardContainer.getTitle() + \" T\", turnOutput/12);\r\n//    this.shuffleboardContainer.add(\"turnPID Setpoint Velocity\", m_turnPIDController.getSetpoint().velocity);\r\n\r\n//    this.shuffleboardContainer.add(\"PID driveOutput\", driveOutput);\r\n//    this.shuffleboardContainer.add(\"PID turnOutput\", turnOutput);\r\n//    this.shuffleboardContainer.add(\"Feedforward\", driveFeedforward.calculate(desiredState.speedMetersPerSecond));\r\n//    this.shuffleboardContainer.add(\"PID Output\", m_drivePIDController.calculate(m_speedMetersPerSecond, state.speedMetersPerSecond));\r\n  }\r\n\r\n  /**\r\n   * Gets the current position of the CANCoder\r\n   * @return cancoder position with magnet offset\r\n   */\r\n  public double getCANCoder(){\r\n    return m_turnEncoder.getPosition();\r\n  }\r\n\r\n  /**\r\n   * Gets the current position of the CANCoder in relation to the magnet\r\n   * @return current CANCoder position\r\n   */\r\n  public double getCANCoderABS(){\r\n    return m_turnEncoder.getAbsolutePosition();\r\n  }\r\n\r\n  @Deprecated\r\n  /** Zeros all the SwerveModule encoders. */\r\n  public void resetEncoders() {\r\n    m_turnEncoder.setPosition(0);\r\n    m_driveMotor.setSelectedSensorPosition(0);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/subsystems/SwerveModule.java b/src/main/java/frc/robot/subsystems/SwerveModule.java
--- a/src/main/java/frc/robot/subsystems/SwerveModule.java	(revision dab63ef418c7d42c908cf12ff9590a2423250d11)
+++ b/src/main/java/frc/robot/subsystems/SwerveModule.java	(date 1647914380913)
@@ -158,8 +158,6 @@
     SwerveModuleState state =
         SwerveModuleState.optimize(desiredState, new Rotation2d(m_turnRadians));
 
-//    SwerveModuleState state = desiredState;
-
     // Calculate the drive output from the drive PID controller.
     final double driveOutput =
         m_drivePIDController.calculate(m_speedMetersPerSecond, state.speedMetersPerSecond)
@@ -196,18 +194,19 @@
 //      done = true;
 //    }
     SmartDashboard.putString(shuffleboardContainer.getTitle() + " desired state: ", state.toString());
-
-
     // Calculate the turning motor output from the turning PID controller.
     m_driveMotor.set(driveOutput/12);
     m_turningMotor.set(turnOutput/12);
-    SmartDashboard.putNumber("Rear Right PID", m_turnPIDController.calculate(m_turnRadians, state.angle.getRadians()));
-    SmartDashboard.putNumber("Rear Right setpoint velocity", m_turnPIDController.getSetpoint().velocity);
-    SmartDashboard.putNumber("Rear Right FeedForward", turnFeedForward.calculate(m_turnPIDController.getSetpoint().velocity));
-    SmartDashboard.putNumber(shuffleboardContainer.getTitle() + " D", driveOutput/12);
-    SmartDashboard.putNumber(shuffleboardContainer.getTitle() + " T", turnOutput/12);
+    if (shuffleboardContainer.getTitle().equals("Rear Right Module")) {
+      SmartDashboard.putNumber("Rear Right PID", m_turnPIDController.calculate(m_turnRadians, state.angle.getRadians()));
+      SmartDashboard.putNumber("Rear Right setpoint velocity", m_turnPIDController.getSetpoint().velocity);
+      SmartDashboard.putNumber("Rear Right velocity error", m_turnPIDController.getVelocityError());
+      SmartDashboard.putNumber("Rear Right FeedForward", turnFeedForward.calculate(m_turnPIDController.getSetpoint().velocity));
+      SmartDashboard.putNumber(shuffleboardContainer.getTitle() + " D", driveOutput/12);
+      SmartDashboard.putNumber(shuffleboardContainer.getTitle() + " T", turnOutput/12);
+    }
+
 //    this.shuffleboardContainer.add("turnPID Setpoint Velocity", m_turnPIDController.getSetpoint().velocity);
-
 //    this.shuffleboardContainer.add("PID driveOutput", driveOutput);
 //    this.shuffleboardContainer.add("PID turnOutput", turnOutput);
 //    this.shuffleboardContainer.add("Feedforward", driveFeedforward.calculate(desiredState.speedMetersPerSecond));
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2cba656b-0875-4993-8864-34528a70bc39\" name=\"Changes\" comment=\"renamed climb retract hooks to make more sense\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/frc/robot/Constants.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/frc/robot/Constants.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"zuntue2022\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/Constants.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/subsystems/DriveSubsystem.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/RobotContainer.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/subsystems/ClimbSubsystem.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/subsystems/SwerveModule.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/frc/robot/subsystems/TowerSubsystem.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"25I8vs1nY94LAG4hfCytLjiLQJC\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"extract.method.default.visibility\" value=\"private\" />\r\n    <property name=\"last_opened_file_path\" value=\"$USER_HOME$/4829_code/2022--RapidReactTestingBot-Imported-master\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.zuntue2022 [deploy]\">\r\n    <configuration name=\"zuntue2022 [ShuffleBoard]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"ShuffleBoard\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"zuntue2022 [buildDependents]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"buildDependents\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"zuntue2022 [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"zuntue2022 [deploy]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"deploy\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"zuntue2022 [vendordep]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"vendordep\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.zuntue2022 [deploy]\" />\r\n        <item itemvalue=\"Gradle.zuntue2022 [build]\" />\r\n        <item itemvalue=\"Gradle.zuntue2022 [ShuffleBoard]\" />\r\n        <item itemvalue=\"Gradle.zuntue2022 [buildDependents]\" />\r\n        <item itemvalue=\"Gradle.zuntue2022 [vendordep]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2cba656b-0875-4993-8864-34528a70bc39\" name=\"Changes\" comment=\"init commit\" />\r\n      <created>1645203483233</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1645203483233</updated>\r\n      <workItem from=\"1645203487217\" duration=\"4943000\" />\r\n      <workItem from=\"1646339277127\" duration=\"2813000\" />\r\n      <workItem from=\"1646456082887\" duration=\"11888000\" />\r\n      <workItem from=\"1646493368604\" duration=\"43411000\" />\r\n      <workItem from=\"1646690712318\" duration=\"36433000\" />\r\n      <workItem from=\"1647144886205\" duration=\"15535000\" />\r\n      <workItem from=\"1647215434845\" duration=\"12970000\" />\r\n      <workItem from=\"1647364674542\" duration=\"12797000\" />\r\n      <workItem from=\"1647462967505\" duration=\"5647000\" />\r\n      <workItem from=\"1647487999931\" duration=\"1233000\" />\r\n      <workItem from=\"1647548605126\" duration=\"6000\" />\r\n      <workItem from=\"1647548646641\" duration=\"4000\" />\r\n      <workItem from=\"1647548736966\" duration=\"2205000\" />\r\n      <workItem from=\"1647561642027\" duration=\"3221000\" />\r\n      <workItem from=\"1647568818646\" duration=\"9803000\" />\r\n      <workItem from=\"1647725994031\" duration=\"59000\" />\r\n      <workItem from=\"1647726206377\" duration=\"4692000\" />\r\n      <workItem from=\"1647749007140\" duration=\"5921000\" />\r\n      <workItem from=\"1647789675427\" duration=\"21586000\" />\r\n      <workItem from=\"1647898496660\" duration=\"4413000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"mostly added comments and few super minor changes (most recommended by intelliJ)\">\r\n      <created>1645207484963</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645207484963</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added phoenix and rev as dependencies\">\r\n      <created>1646458584096</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646458584096</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"made a lot of changes, mostly copying code from RedThunder7166\">\r\n      <created>1646462959732</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646462959732</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"updated it for our gyro\">\r\n      <created>1646463192150</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646463192150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"updated can IDs\">\r\n      <created>1646464760658</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646464760658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"changed some constants to try and get rid of chattering.\">\r\n      <created>1646465532000</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646465532000</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added Limelight subsystem. And minor improvements to constant (adding deadband for controller).\">\r\n      <created>1646498274607</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646498274607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Added Shooter Subsystem\">\r\n      <created>1646512318831</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646512318831</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"tuning first attempts\">\r\n      <created>1646521526569</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646521526569</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"updated feedforward values for the robot as it is currently configured. (will need to be done again after the robot if fully assembled.)\">\r\n      <created>1646683949141</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646683949141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"improved logging\">\r\n      <created>1646686577773</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646686577773</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"changes from Ryan and I's session\">\r\n      <created>1646774717812</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646774717812</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Almost entirely implemented Climb Subsystem\">\r\n      <created>1647110287099</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647110287099</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"deleted a ver confusing &quot;+0.1&quot; in the SwerveModule class. Continued work on ClimbSubsystem\">\r\n      <created>1647110437890</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647110437890</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"ClimbSubsystem initial code done. now for commands and then testing.\">\r\n      <created>1647110787297</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647110787297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"implementing climb testing\">\r\n      <created>1647116759163</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647116759163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"implementing climb testing\">\r\n      <created>1647117376842</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647117376842</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"made sure swerve wont freak out when i enable the robot\">\r\n      <created>1647118340809</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647118340809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"probably my stopping place for climb for the day, I realized that we are probably going to need to add a limit switch to the climb arms because the rope winds unpredictably.\">\r\n      <created>1647128878641</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647128878641</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"updated CAN IDs\">\r\n      <created>1647144969291</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647144969291</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"idk\">\r\n      <created>1647186316920</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647186316920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"changes from today, climb still not working\">\r\n      <created>1647217269888</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647217269888</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"deleted wrong comments\">\r\n      <created>1647290174674</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647290174674</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"added intake and restructured some things\">\r\n      <created>1647368997228</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647368997228</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Need to fix one more problem with swerve\">\r\n      <created>1647463719118</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647463719118</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"most recent changes, still a work in progress\">\r\n      <created>1647727925197</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647727925197</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"finished implementing climb subsystem, ready for testing and tuning now. after that just need to implement various climb commands, but that should be easy.\">\r\n      <created>1647754369887</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647754369887</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"most recent changes to climb subsystem and relevant constants\">\r\n      <created>1647789716329</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647789716329</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"ryan changes\">\r\n      <created>1647810219137</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647810219137</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"renamed climb retract hooks to make more sense\">\r\n      <created>1647899116279</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647899116279</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:edu.wpi.first.wpilibj:wpilibj-java\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"changed some constants to try and get rid of chattering.\" />\r\n    <MESSAGE value=\"Added Limelight subsystem. And minor improvements to constant (adding deadband for controller).\" />\r\n    <MESSAGE value=\"Added Shooter Subsystem\" />\r\n    <MESSAGE value=\"tuning first attempts\" />\r\n    <MESSAGE value=\"updated feedforward values for the robot as it is currently configured. (will need to be done again after the robot if fully assembled.)\" />\r\n    <MESSAGE value=\"improved logging\" />\r\n    <MESSAGE value=\"changes from Ryan and I's session\" />\r\n    <MESSAGE value=\"Almost entirely implemented Climb Subsystem\" />\r\n    <MESSAGE value=\"deleted a ver confusing &quot;+0.1&quot; in the SwerveModule class. Continued work on ClimbSubsystem\" />\r\n    <MESSAGE value=\"ClimbSubsystem initial code done. now for commands and then testing.\" />\r\n    <MESSAGE value=\"implementing climb testing\" />\r\n    <MESSAGE value=\"made sure swerve wont freak out when i enable the robot\" />\r\n    <MESSAGE value=\"probably my stopping place for climb for the day, I realized that we are probably going to need to add a limit switch to the climb arms because the rope winds unpredictably.\" />\r\n    <MESSAGE value=\"updated CAN IDs\" />\r\n    <MESSAGE value=\"added Angle Zero Offset\" />\r\n    <MESSAGE value=\"idk\" />\r\n    <MESSAGE value=\"changes from today, climb still not working\" />\r\n    <MESSAGE value=\"deleted wrong comments\" />\r\n    <MESSAGE value=\"added intake and restructured some things\" />\r\n    <MESSAGE value=\"Need to fix one more problem with swerve\" />\r\n    <MESSAGE value=\"most recent changes, still a work in progress\" />\r\n    <MESSAGE value=\"finished implementing climb subsystem, ready for testing and tuning now. after that just need to implement various climb commands, but that should be easy.\" />\r\n    <MESSAGE value=\"most recent changes to climb subsystem and relevant constants\" />\r\n    <MESSAGE value=\"ryan changes\" />\r\n    <MESSAGE value=\"renamed climb retract hooks to make more sense\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"renamed climb retract hooks to make more sense\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision dab63ef418c7d42c908cf12ff9590a2423250d11)
+++ b/.idea/workspace.xml	(date 1648000306155)
@@ -4,9 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2cba656b-0875-4993-8864-34528a70bc39" name="Changes" comment="renamed climb retract hooks to make more sense">
+    <list default="true" id="2cba656b-0875-4993-8864-34528a70bc39" name="Changes" comment="swerve works pretty good with these values (except kvTurn was 1.5, about to test 1 now).">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/frc/robot/Constants.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/frc/robot/Constants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/frc/robot/RobotContainer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/frc/robot/RobotContainer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/frc/robot/subsystems/SwerveModule.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/frc/robot/subsystems/SwerveModule.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -223,7 +225,7 @@
       <workItem from="1647726206377" duration="4692000" />
       <workItem from="1647749007140" duration="5921000" />
       <workItem from="1647789675427" duration="21586000" />
-      <workItem from="1647898496660" duration="4413000" />
+      <workItem from="1647898496660" duration="11186000" />
     </task>
     <task id="LOCAL-00001" summary="mostly added comments and few super minor changes (most recommended by intelliJ)">
       <created>1645207484963</created>
@@ -435,7 +437,14 @@
       <option name="project" value="LOCAL" />
       <updated>1647899116279</updated>
     </task>
-    <option name="localTasksCounter" value="31" />
+    <task id="LOCAL-00031" summary="swerve works pretty good with these values (except kvTurn was 1.5, about to test 1 now).">
+      <created>1647904404554</created>
+      <option name="number" value="00031" />
+      <option name="presentableId" value="LOCAL-00031" />
+      <option name="project" value="LOCAL" />
+      <updated>1647904404554</updated>
+    </task>
+    <option name="localTasksCounter" value="32" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -457,7 +466,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="changed some constants to try and get rid of chattering." />
     <MESSAGE value="Added Limelight subsystem. And minor improvements to constant (adding deadband for controller)." />
     <MESSAGE value="Added Shooter Subsystem" />
     <MESSAGE value="tuning first attempts" />
@@ -482,6 +490,7 @@
     <MESSAGE value="most recent changes to climb subsystem and relevant constants" />
     <MESSAGE value="ryan changes" />
     <MESSAGE value="renamed climb retract hooks to make more sense" />
-    <option name="LAST_COMMIT_MESSAGE" value="renamed climb retract hooks to make more sense" />
+    <MESSAGE value="swerve works pretty good with these values (except kvTurn was 1.5, about to test 1 now)." />
+    <option name="LAST_COMMIT_MESSAGE" value="swerve works pretty good with these values (except kvTurn was 1.5, about to test 1 now)." />
   </component>
 </project>
\ No newline at end of file
